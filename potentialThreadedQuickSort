#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define ARRAY_SIZE 10000
#define THREAD_COUNT 4

typedef struct {
    int low1;
    int high1;
    int low2;
    int high2;
} merge_indices;

int arr[ARRAY_SIZE]; // Global array

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Thread function for quicksort
void* quickSortThread(void* arg) {
    merge_indices *data = (merge_indices*)arg;
    quickSort(arr, data->low1, data->high2);
    pthread_exit(NULL);
}

// Multi-threaded merge function
void* mergeThread(void* arg) {
    merge_indices *data = (merge_indices*)arg;
    int low1 = data->low1, high1 = data->high1;
    int low2 = data->low2, high2 = data->high2;

    int temp[ARRAY_SIZE];
    int i = low1, j = low2, k = 0;

    while (i <= high1 && j <= high2) {
        if (arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    
    while (i <= high1) temp[k++] = arr[i++];
    while (j <= high2) temp[k++] = arr[j++];

    for (i = 0, j = low1; j <= high2; i++, j++) {
        arr[j] = temp[i];
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[THREAD_COUNT];
    merge_indices thread_data[THREAD_COUNT];

    srand(time(NULL));
    for (int i = 0; i < ARRAY_SIZE; i++) { 
        arr[i] = rand() % 100000;
    }

    int partitionSize = ARRAY_SIZE / THREAD_COUNT;
    struct timespec start, end;
    clock_gettime(CLOCK_MONOTONIC, &start);

    // Step 1: Create threads for quicksort
    for (int i = 0; i < THREAD_COUNT; i++) {
        thread_data[i].low1 = i * partitionSize;
        thread_data[i].high2 = (i == THREAD_COUNT - 1) ? (ARRAY_SIZE - 1) : ((i + 1) * partitionSize - 1);
        pthread_create(&threads[i], NULL, quickSortThread, &thread_data[i]);
    }

    for (int i = 0; i < THREAD_COUNT; i++) {
        pthread_join(threads[i], NULL);
    }

    // Step 2: Multi-threaded merging
    int mergePass = THREAD_COUNT;
    while (mergePass > 1) {
        int mergeThreadCount = mergePass / 2;
        pthread_t mergeThreads[mergeThreadCount];
        merge_indices mergeData[mergeThreadCount];

        for (int i = 0; i < mergeThreadCount; i++) {
            mergeData[i].low1 = thread_data[i * 2].low1;
            mergeData[i].high1 = thread_data[i * 2].high2;
            mergeData[i].low2 = thread_data[i * 2 + 1].low1;
            mergeData[i].high2 = thread_data[i * 2 + 1].high2;

            pthread_create(&mergeThreads[i], NULL, mergeThread, &mergeData[i]);
        }

        for (int i = 0; i < mergeThreadCount; i++) {
            pthread_join(mergeThreads[i], NULL);
        }

        // Reduce merge pass count by half
        mergePass /= 2;
    }

    clock_gettime(CLOCK_MONOTONIC, &end);
    double elapsed = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;
    printf("Elapsed time: %f seconds\n", elapsed);

    return 0;
}
