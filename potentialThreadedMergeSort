#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define ARRAY_SIZE 10000
#define THREAD_COUNT 4  // Number of threads

typedef struct {
    int left;
    int right;
} merge_sort_args;

int arr[ARRAY_SIZE];  // Global array

// Merge function (same as before)
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int leftArr[n1], rightArr[n2];

    for (i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    i = 0; 
    j = 0; 
    k = left;
    
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
        }
    }

    while (i < n1) arr[k++] = leftArr[i++];
    while (j < n2) arr[k++] = rightArr[j++];
}

// Regular merge sort
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Thread function for parallel merge sort
void* mergeSortThread(void* arg) {
    merge_sort_args *args = (merge_sort_args*)arg;
    mergeSort(arr, args->left, args->right);
    pthread_exit(NULL);
}

// Multi-threaded merging function
void* mergeThread(void* arg) {
    merge_sort_args *args = (merge_sort_args*)arg;
    int left = args->left;
    int right = args->right;
    int mid = left + (right - left) / 2;

    merge(arr, left, mid, right);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[THREAD_COUNT];
    merge_sort_args thread_data[THREAD_COUNT];

    srand(time(NULL));
    for (int i = 0; i < ARRAY_SIZE; i++) { 
        arr[i] = rand() % 100000;
    }

    printf("First 10 elements before sorting:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    int partitionSize = ARRAY_SIZE / THREAD_COUNT;
    struct timespec start, end;
    clock_gettime(CLOCK_MONOTONIC, &start);

    // Step 1: Create threads for merge sort
    for (int i = 0; i < THREAD_COUNT; i++) {
        thread_data[i].left = i * partitionSize;
        thread_data[i].right = (i == THREAD_COUNT - 1) ? (ARRAY_SIZE - 1) : ((i + 1) * partitionSize - 1);
        pthread_create(&threads[i], NULL, mergeSortThread, &thread_data[i]);
    }

    for (int i = 0; i < THREAD_COUNT; i++) {
        pthread_join(threads[i], NULL);
    }

    // Step 2: Multi-threaded merging in stages
    int mergePass = THREAD_COUNT;
    while (mergePass > 1) {
        int mergeThreadCount = mergePass / 2;
        pthread_t mergeThreads[mergeThreadCount];
        merge_sort_args mergeData[mergeThreadCount];

        for (int i = 0; i < mergeThreadCount; i++) {
            mergeData[i].left = thread_data[i * 2].left;
            mergeData[i].right = thread_data[i * 2 + 1].right;

            pthread_create(&mergeThreads[i], NULL, mergeThread, &mergeData[i]);
        }

        for (int i = 0; i < mergeThreadCount; i++) {
            pthread_join(mergeThreads[i], NULL);
        }

        mergePass /= 2;
    }

    clock_gettime(CLOCK_MONOTONIC, &end);
    double elapsed = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    printf("Elapsed time: %f seconds\n", elapsed);
    printf("First 10 elements after sorting:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
